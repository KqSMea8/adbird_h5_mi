(function() {
    "use strict";
    class e {}
    class t {
        constructor(e) {
            let t = document.createElement("xhfw-module");
            u.activeModuleElement = t;
            document.body.appendChild(t);
            t.className = e.cssClassNamespace
        }
    }
    class n {}
    class a {
        constructor(e) {
            let t = document.createElement("xhfw-component");
            t.id = "xhfw-component-" + u.ncid;
            o[u.ncid].element = t;
            e.parentElement.appendChild(t);
            t.insertAdjacentHTML("afterbegin", e.template);
            t.className = e.cssClassNamespace;
            if (e.registerElements) e.registerElements();
            let n = u.ncid;
            u.ncid = (Number(u.ncid) + 1).toString();
            l(t, n)
        }
    }
    class s {
        constructor() {
            this.component = null;
            this.element = null;
            this.parentCid = null
        }
    }
    let o = {};

    function l(e, t) {
        for (let n = 0; n < e.children.length; n++) {
            for (let a = 0; a < u.componentRegistry.length; a++) {
                if (u.componentRegistry[a].selector && e.children[n].tagName == u.componentRegistry[a].selector.toUpperCase()) {
                    o[u.ncid] = new s;
                    o[u.ncid].parentCid = t;
                    o[u.ncid].component = new u.componentRegistry[a].component(e.children[n])
                }
            }
        }
    }

    function i() {
        for (let e = 0; e < u.moduleRegistry.length; e++) {
            document.head.insertAdjacentHTML("beforeend", `\n        <link rel="stylesheet" href="./css/${u.moduleRegistry[e].cssFileNameNoExt}.css">\n        `)
        }
        for (let e = 0; e < u.componentRegistry.length; e++) {
            document.head.insertAdjacentHTML("beforeend", `\n        <link rel="stylesheet" href="./css/${u.componentRegistry[e].cssFileNameNoExt}.css">\n        `)
        }
    }

    function r() {
        let e = 0;
        while (e < u.componentRegistry.length) {
            if (!u.componentRegistry[e].selector) {
                u.componentRegistry.splice(e, 1)
            } else e++
        }
    }
    let d = window;
    d.AudioContext = d.AudioContext || d.webkitAudioContext;
    let c = new AudioContext;
    let u = {
        platform: "",
        ComponentMetaData: n,
        Component: a,
        componentRegistry: [],
        ncid: "0",
        nid(e, t = null) {
            if (t == null) return `xhfw-${e}-${u.ncid}`;
            else return `xhfw-${e}-${t}`
        },
        cidE(e, t = null) {
            if (t == null) return document.getElementById(`${u.nid(e)}`);
            return document.getElementById(`xhfw-${e}-${t}`)
        },
        navigateToComponent(e) {
            let t = Object.keys(o);
            for (let e = 0; e < t.length; e++) {
                o[t[e]].element.remove();
                delete o[t[e]]
            }
            o[u.ncid] = new s;
            o[u.ncid].component = new e(u.activeModuleElement)
        },
        activeComponents: o,
        convertTemplateToElement(e, t) {
            let n = document.createElement("template");
            n.innerHTML = e.trim();
            let a = n.content.firstChild;
            t.appendChild(a);
            return a
        },
        createSelectorComponent(e, t, n) {
            let a = u.convertTemplateToElement(e, t);
            for (let e = 0; e < u.componentRegistry.length; e++) {
                if (u.componentRegistry[e].selector && a.tagName == u.componentRegistry[e].selector.toUpperCase()) {
                    o[u.ncid] = new s;
                    o[u.ncid].parentCid = n;
                    o[u.ncid].component = new u.componentRegistry[e].component(a)
                }
            }
        },
        getSelectorData(e) {
            let t = document.getElementById("xhfw-component-" + e).parentElement.getAttribute("xhfw-data");
            let n;
            try {
                n = JSON.parse(t)
            } catch (e) {
                return t
            }
            return n
        },
        onParentCall(e, t) {
            let n = Object.keys(u.activeComponents);
            for (let a = 0; a < n.length; a++) {
                if (u.activeComponents[n[a]].element == e.firstChild) {
                    u.activeComponents[n[a]].component.onParentCall(t)
                }
            }
        },
        onSelectorEvent(e, t) {
            let n = o[e].parentCid;
            o[n].component.onSelectorEvent(t)
        },
        ModuleMetaData: e,
        Module: t,
        moduleRegistry: [],
        activeModuleElement: null,
        navigateToModule(e) {
            if (u.activeModuleElement) u.activeModuleElement.remove();
            u.onModuleDestroy();
            u.onModuleDestroy = (() => {});
            new e
        },
        onModuleDestroy: () => {},
        loadLibraries(e) {
            let t = [];
            for (let n = 0; n < e.length; n++) {
                t.push(new Promise(t => {
                    let a = document.createElement("script");
                    a.onload = (() => t());
                    a.src = e[n];
                    document.head.appendChild(a)
                }))
            }
            return Promise.all(t)
        },
        loadImages(e) {
            let t = [];
            for (let n = 0; n < e.length; n++) {
                t.push(new Promise(t => {
                    let a = document.createElement("img");
                    let s;
                    a.onload = (() => t(s));
                    a.src = e[n];
                    a.style.display = "none";
                    s = document.head.appendChild(a)
                }))
            }
            return Promise.all(t)
        },
        getBase64(e) {
            let t = document.createElement("canvas");
            document.head.appendChild(t);
            let n = t.getContext("2d");
            n.drawImage(e, 10, 10);
            setTimeout(() => t.remove(), 5e3);
            return t.toDataURL()
        },
        loadAudios(e) {
            let t = [];
            for (let n = 0; n < e.length; n++) {
                t.push(new Promise(t => {
                    let a = new XMLHttpRequest;
                    a.open("GET", e[n], true);
                    a.responseType = "arraybuffer";
                    a.onload = (() => {
                        c.decodeAudioData(a.response, e => t(e))
                    });
                    a.send()
                }))
            }
            return Promise.all(t)
        },
        playAudio(e, t = false) {
            try {
                let n = c.createBufferSource();
                n.buffer = e;
                n.loop = t;
                n.connect(c.destination);
                n.start(0);
                return n
            } catch (e) {
                console.log(e);
                return null
            }
        },
        playAudioWithVolumeControl(e) {
            try {
                let t = c.createBufferSource();
                let n = c.createGain();
                t.buffer = e;
                t.loop = true;
                t.start(0);
                n.connect(c.destination);
                t.connect(n);
                return {
                    sourceNode: t,
                    gainNode: n
                }
            } catch (e) {
                console.log(e);
                return null
            }
        },
        stopAudio(e, t = null) {
            if (t) {
                try {
                    t.disconnect(c.destination)
                } catch (e) {
                    console.log(e)
                }
            }
            if (e) {
                try {
                    e.stop(0)
                } catch (e) {
                    console.log(e)
                }
            }
        },
        muteAudio(e) {
            if (e) {
                try {
                    e.disconnect(c.destination)
                } catch (e) {
                    console.log(e)
                }
            }
        },
        unmuteAudio(e) {
            if (e) {
                try {
                    e.connect(c.destination)
                } catch (e) {
                    console.log(e)
                }
            }
        },
        initializeXHFW() {
            i();
            r()
        },
        progressLoader: (...e) => {},
        calcDaysBetween(e, t) {
            let n = 1e3 * 60 * 60 * 24;
            let a = new Date(e).getTime();
            let s = new Date(t).getTime();
            var o = Math.abs(a - s);
            return Math.floor(o / n)
        }
    };
    let m = {
        initializeAds: p,
        adErrorCodeToMessage: h,
        getInterstitialAd: f,
        playInterstitialMustResolve: g,
        interstitialId: null,
        preloadedInterstitial: null,
        interstitialStatus: "INIT",
        isInterstitial: false,
        getRewardedVideo: A,
        watchRewardedVideo: E,
        rewardedVideoId: null,
        preloadedRewardedVideo: null,
        rewardedStatus: "INIT",
        isRewarded: false,
        loadInvitationImage: I,
        startInvitation: T,
        createShortcut: y,
        subscribeToPause: R
    };

    function p(e, t = null) {
       
    }

    function h(e) {
        let t = "An unknown error has occured.";
        if (e == "ADS_NO_FILL") t = "Sorry, there is current no ad to show.<br><br>Please come back later.";
        else if (e = "NOT_SUPPORTED") t = "Sorry, ads are not supported on desktops.";
        else if (e = "UNKNOWN") t = "Sorry, there seems to be a problem loading the ad.<br><br>Please come back later.";
        return t
    }

    function f() {
       
    }

    function A() {
     
    }

    function E(e, t, n, a) {
       
    }

    function g() {
        return new Promise((e, t) => {
            if (m.isInterstitial) {
              
            } else e()
        })
    }
    let b;

    function I(e) {
        return u.loadImages([e]).then(e => {
            b = u.getBase64(e[0]);
            return
        })
    }

    function T(e, t) {
       
    }

    function y(e) {
        if (u.calcDaysBetween(new Date(e), new Date) >= 3) {
         
        }
    }

    function R(e, t, n) {
        let a = () => {
            if (t.isPauseAllowed) {
                t.isPaused = true;
                for (let t = 0; t < e.length; t++) {
                    u.muteAudio(e[t])
                }
                t.pausePromise = n("Resume").then(() => {
                    t.isPaused = false;
                    for (let t = 0; t < e.length; t++) {
                        u.unmuteAudio(e[t])
                    }
                })
            }
        };
    }
    let S = [];
    let v = {
        gold: 0,
        diamond: 0,
        bestPoint: 0,
        gamePlayNumber: 0,
        lastLoginDate: "",
        isLowFpsRecordeByServer: false,
        invitationArray: S
    };
    let _ = {
        initializeData: L,
        setData: P
    };

    function L(e) {
        let t = new Promise((e, t) => {
            if (!u.platform) {
                let t = localStorage.getItem("gameData");
                if (t) e(JSON.parse(t));
                else e({})
            } else if (u.platform == "FB") {
            
            }
        });
        return t.then(e => {
            if (e) {
                let t = Object.keys(e);
                for (let n = 0; n < t.length; n++) {
                    v[t[n]] = e[t[n]]
                }
            }
        }).then(e => {
            _.setData()
        }, t => {
            e("Connection Error for Getting Player Data.").then(() => {
                location.reload()
            })
        })
    }

    function P() {
        return new Promise((e, t) => {
            if (!u.platform) {
                localStorage.setItem("gameData", JSON.stringify(v));
                e()
            } else if (u.platform == "FB") {
             
            }
        })
    }
    let w = {
        alert: function(e, t = ["OK"]) {
            let n = C.length;
            let a;
            let s = "";
            for (let e = 0; e < t.length; e++) {
                s += `<div class="gsAlertButton lightOrangeBtn" id="${n}gsAlert${e}">${t[e]}</div>`
            }
            let o = "text-align:center;";
            let l = "border:solid white;";
            let i = "opacity:1;";
            let r = "";
            let d = "gsAlertBoxLong";
            let c = `<div class="gsAlertBoxBg" style="${i}"></div>`;
            let m = "";
            if (e.length >= 150) m = "width:70%;";
            if (e.length >= 300) m = "width:100%;";
            let p = `\n<span>\n<div class="gsAlertMask ${r}"></div>\n<div class="gsAlertBox ${d}" style="${o}${l}${m}">\n    ${c}\n    ${e}\n    <div class="gsAlertButtonBox">${s}</div>\n</div>\n</span>`;
            let h = u.activeModuleElement;
            C.push(u.convertTemplateToElement(p, h));
            for (let e = 0; e < t.length; e++) {
                document.getElementById(n + "gsAlert" + e).addEventListener("click", () => {
                    C[n].remove();
                    a(e)
                })
            }
            return new Promise(e => a = e)
        },
        loader: function(e) {
            if (!e) {
                O[0].remove();
                O.shift();
                return
            }
            let t = `\n<span style="z-index:100" data-html2canvas-ignore="true">\n<div class="gsAlertMask"></div>\n<div class="gsAlertBox gsAlertBoxShort"><span>Please Wait...</span></div>\n</span>`;
            let n = u.activeModuleElement;
            O.push(u.convertTemplateToElement(t, n));
            return O[O.length - 1]
        }
    };
    let C = [];
    let O = [];
    let M = {
        loadMainBgm: F,
        loadMusics: j,
        loadSounds: x,
        loadGameResources: H,
        clearResources: z,
        mainBgm: null,
        bgmsObj: {},
        bgssObj: {},
        soundsObj: {},
        splash: null
    };
    let B = [];
    let D = [];
    let N = [{
        id: "bounce",
        url: "asset/bounce.mp3"
    }, {
        id: "break",
        url: "asset/break.mp3"
    }];

    function F() {
        let e = [];
        for (let t = 0; t < B.length; t++) {
            e.push(B[t].url)
        }
        return u.loadAudios(e).then(e => {
            M.mainBgm = e[0]
        })
    }

    function j() {
        return U(D, M.bgmsObj)
    }

    function x() {
        return U(N, M.soundsObj)
    }

    function U(e, t) {
        let n = [];
        for (let t = 0; t < e.length; t++) {
            n.push(e[t].url)
        }
        return u.loadAudios(n).then(n => {
            for (let a = 0; a < n.length; a++) {
                t[e[a].id] = n[a]
            }
        })
    }

    function H() {
        return new Promise(e => {
            (new THREE.JSONLoader).load("asset/splash.json", t => {
                M.splash = t;
                e()
            })
        })
    }

    function z() {}
    let $ = 2;
    let Z = {
        stage: 1,
        point: 0,
        preventAdsTimes: 1,
        colorIndex: 0,
        isLooping: null,
        bgm: null,
        pauseObj: {
            isPauseAllowed: false,
            isPaused: false,
            pausePromise: null
        }
    };
    let G = {
        rightAmt: 0,
        isSubscribed: false,
        initializeVariables: k,
        subscribeToGameControl: V,
        unsubscribeToGameControl: W
    };

    function k() {
        G.rightAmt = 0
    }

    function V() {
        G.isSubscribed = true;
        document.addEventListener("touchmove", K, {
            passive: false,
            capture: false
        });
        document.addEventListener("touchstart", K);
        document.addEventListener("touchend", K);
        document.addEventListener("mousedown", K);
        document.addEventListener("mouseup", K)
    }

    function W() {
        G.isSubscribed = false;
        document.removeEventListener("touchmove", K)
    }
    let Y = null;

    function K(e) {
        if (e.type == "touchmove") {
            e.preventDefault();
            X(e)
        } else if (e.type == "touchstart") Y = e.touches[0].clientX;
        else if (e.type == "touchend") {
            Y = null;
            G.rightAmt = 0
        } else if (e.type == "mousedown") {
            document.addEventListener("mousemove", X);
            Y = e.clientX
        } else if (e.type == "mouseup") {
            document.removeEventListener("mousemove", X);
            Y = null;
            G.rightAmt = 0
        }
    }

    function X(e) {
        let t = e.touches ? e.touches[0].clientX : e.clientX;
        G.rightAmt = (t - Y) / window.innerWidth;
        Y = t
    }
    let q = 45,
        J = 2,
        Q = 9.8 * 2,
        ee = {
            x: 0,
            y: 0,
            z: 0
        },
        te = 75,
        ne = 1,
        ae = 3.7,
        se = 8,
        oe = 15,
        le = 1.8,
        ie = .2,
        re = ie / le,
        de = .3,
        ce = 3,
        ue = 8.3,
        me = .6,
        pe = .08,
        he = .05,
        fe = 4,
        Ae = 3,
        Ee = 1.1,
        ge = 2.5,
        be = .4,
        Ie = 12,
        Te = Math.PI * 2 / Ie,
        ye = 5,
        Re = 1.6,
        Se = 3.6,
        ve = 20,
        _e = 3,
        Le = [{
            pole: [48, 48, 48],
            ball: [76, 144, 255],
            pizza: [255, 136, 81],
            lethal: [255, 60, 30],
            super: [255, 0, 0],
            bg: [
                [255, 255, 255],
                [183, 255, 230],
                [133, 255, 200]
            ]
        }];
    let Pe = {
        FPS: q,
        RESOLUTION_RATIO: J,
        GRAVITY: Q,
        INIT_COORD: ee,
        CAMERA_BASE_Y: ne,
        CAMERA_LOOK_DOWN: ae,
        CAMERA_FAR_LIMIT: te,
        CAMERA_FROM_CENTER: se,
        CAMERA_UPDATE_FRAMES: oe,
        BALL_FROM_CENTER: le,
        BALL_RADIUS: ie,
        BALL_THETA_RADIUS: re,
        BALL_ELASTICITY: de,
        SUPER_THRESHOLD: ce,
        BOUNCE_SPEED: ue,
        AFTERIMAGE_RATIO: me,
        AFTERIMAGE_DECAY: pe,
        DROP_SIZE: he,
        DROP_HORIZONTAL_SPEED: fe,
        DROP_BOUNCE_SPEED: Ae,
        POLE_RADIUS: Ee,
        PIZZA_RADIUS: ge,
        PIZZA_HEIGHT: be,
        PIZZA_NUMBER: Ie,
        PIZZA_UNIT_THETA: Te,
        PIZZA_BREAK_SPEED: ye,
        PLATE_INIT_DISTANCE: Re,
        PLATE_DISTANCE: Se,
        STAGE_PLATE_NUMBER: ve,
        STAGE_DIFFICULTY_INC: _e,
        COLOR_COMBS: Le
    };
    class we {
        constructor(e) {
            let t, n;
            t = window.innerWidth;
            n = window.innerHeight;
            if (e && t < n || !e && t > n) {
                let e = t;
                t = n;
                n = e
            }
            this.scene = new THREE.Scene;
            this.camera = new THREE.PerspectiveCamera(75, t / n, .5, Pe.CAMERA_FAR_LIMIT);
            this.renderer = new THREE.WebGLRenderer({
                alpha: true
            });
            this.renderer.setSize(t * Pe.RESOLUTION_RATIO, n * Pe.RESOLUTION_RATIO, false)
        }
    }
    let Ce = {
        stage: 1,
        preventAdsTimes: 1,
        isLooping: null,
        bgm: null,
        pauseObj: {
            isPauseAllowed: false,
            isPaused: false,
            pausePromise: null
        }
    };
    let Oe = {
        checkFps: De,
        updateCameraPosition: Ne,
        createShadow: Fe
    };
    let Me = 1;
    let Be;

    function De(e) {
        setTimeout(() => {
            Be = e.frameCount;
            setTimeout(() => {
                let n = ~~((e.frameCount - Be) / Me);
                if (n <= 57) t(n)
            }, Me * 1e3)
        }, 500);

        function t(t) {
            if (Ce.pauseObj.isPaused) De(e);
            else {
                if (Pe.FPS == 60) {
                    Pe.FPS = 45;
                    De(e)
                } else if (Pe.FPS == 45 && t <= 50) {
                    Pe.FPS = 30;
                    De(e)
                } else if (Pe.FPS == 30 && t <= 35) Pe.FPS = 20;
                e.fpsRate = 60 / Pe.FPS;
                e.fpsTime = 1e3 / Pe.FPS;
                
            }
        }
    }

    function Ne(e) {
        let t = Math.sin(e.ball.theta) * Pe.CAMERA_FROM_CENTER;
        let n = Math.cos(e.ball.theta) * Pe.CAMERA_FROM_CENTER;
        e.camera.position.x = n;
        e.camera.position.z = t;
        e.camera.lookAt(new THREE.Vector3(e.ball.obj.position.x, e.camera.position.y - Pe.CAMERA_LOOK_DOWN, e.ball.obj.position.z))
    }

    function Fe(e, t, n, a) {
        e.obj.updateMatrixWorld();
        e.obj.traverse(s => {
            if (s instanceof THREE.Mesh) {
                if (!e.shadow || s.name.indexOf("x") >= 0 || s.name == "y") {
                    e.shadow = new THREE.ShadowMesh(s);
                    e.shadow.name = s.name + "-shadow";
                    t.add(e.shadow);
                    e.shadow.update(a, n)
                }
            }
        })
    }
    class je {
        constructor() {
            this.theta = 0;
            this.speed = {
                x: 0,
                y: 0,
                z: 0
            };
            this.maxYSpeed = Pe.BOUNCE_SPEED;
            let e = Pe.COLOR_COMBS[Z.colorIndex];
            let t = new THREE.MeshLambertMaterial({
                color: `rgb(${e.ball[0]},${e.ball[1]},${e.ball[2]})`
            });
            let n = new THREE.SphereBufferGeometry(Pe.BALL_RADIUS, 32, 32);
            this.obj = new THREE.Mesh(n, t);
            this.obj.position.set(Pe.BALL_FROM_CENTER, .5, 0);
            this.obj.name = "ball"
        }
        changeTheta(e) {
            this.theta += e;
            if (this.theta < 0) this.theta += 2 * Math.PI;
            else if (this.theta > 2 * Math.PI) this.theta -= 2 * Math.PI;
            this.obj.position.z = Math.sin(this.theta) * Pe.BALL_FROM_CENTER;
            this.obj.position.x = Math.cos(this.theta) * Pe.BALL_FROM_CENTER
        }
    }
    class xe {
        constructor(e, t, n, a = null) {
            this.theta = 0;
            this.speed = {
                x: 0,
                y: 0,
                z: 0
            };
            let s = Pe.COLOR_COMBS[Z.colorIndex];
            let o;
            if (a == "lethal") o = `rgb(${s.lethal[0]},${s.lethal[1]},${s.lethal[2]})`;
            else if (a == "last") o = 16776960;
            else o = `rgb(${s.pizza[0]},${s.pizza[1]},${s.pizza[2]})`;
            let l = a ? Pe.PIZZA_RADIUS + .01 : Pe.PIZZA_RADIUS;
            let i = a ? Pe.PIZZA_HEIGHT + .01 : Pe.PIZZA_HEIGHT;
            let r = a ? .005 : 0;
            let d = Pe.PIZZA_UNIT_THETA * (t + 1 - e);
            let c = a ? d + .1 : d;
            let u = a ? .05 : 0;
            let m = new THREE.Shape;
            m.moveTo(0, 0);
            m.absarc(0, 0, l, 0, c, false);
            m.lineTo(0, 0);
            let p = new THREE.ExtrudeBufferGeometry(m, {
                amount: i,
                bevelEnabled: false,
                steps: 1,
                curveSegments: 32
            });
            let h = new THREE.MeshLambertMaterial({
                color: o
            });
            this.obj = new THREE.Mesh(p, h);
            this.obj.rotation.x = Math.PI / 2;
            this.obj.rotation.z = e * Pe.PIZZA_UNIT_THETA - u;
            this.theta = this.obj.rotation.z;
            this.obj.position.set(0, -1 * (Pe.PLATE_INIT_DISTANCE + Pe.PLATE_DISTANCE * n) + r, 0);
            let f = (t + e + 1) / 2 * Pe.PIZZA_UNIT_THETA;
            let A = 1.25 - Math.random() * .5;
            this.speed.x = Math.cos(f) * Pe.PIZZA_BREAK_SPEED / 60 * A;
            this.speed.y = 0;
            this.speed.z = Math.sin(f) * Pe.PIZZA_BREAK_SPEED / 60 * A;
            this.obj.name = "pizza"
        }
    }
    class Ue {
        constructor(e) {
            let t = new THREE.CylinderBufferGeometry(Pe.POLE_RADIUS, Pe.POLE_RADIUS, e, 16, false);
            let n = Pe.COLOR_COMBS[Z.colorIndex];
            let a = new THREE.MeshLambertMaterial({
                color: `rgb(${n.pole[0]},${n.pole[1]},${n.pole[2]})`
            });
            this.obj = new THREE.Mesh(t, a);
            this.obj.position.set(0, -.5 * e, 0);
            this.obj.name = "pole";
            t = new THREE.CylinderBufferGeometry(Pe.PIZZA_RADIUS, Pe.PIZZA_RADIUS, Pe.PIZZA_HEIGHT, 16, false);
            a = new THREE.MeshLambertMaterial({
                color: 16776960
            });
            this.bottom = new THREE.Mesh(t, a);
            this.bottom.position.set(0, -e - .5 * Pe.PIZZA_HEIGHT, 0);
            this.bottom.name = "bottom"
        }
    }
    class He {
        constructor() {
            let e = Pe.BALL_RADIUS * Pe.AFTERIMAGE_RATIO;
            let t = Pe.COLOR_COMBS[Z.colorIndex];
            let n = "ball";
            let a = new THREE.MeshBasicMaterial({
                color: `rgb(${t[n][0]},${t[n][1]},${t[n][2]})`
            });
            let s = new THREE.CylinderBufferGeometry(e, e, 1, 32);
            this.obj = new THREE.Mesh(s, a);
            this.obj.visible = false;
            this.obj.name = "afterimage"
        }
        setPositionHeight(e, t, n) {
            let a = t * 1.5;
            this.obj.scale.y = a;
            this.obj.scale.x = this.obj.scale.z = 1;
            this.obj.position.set(e.x, e.y - a / 2, e.z);
            let s = Pe.COLOR_COMBS[Z.colorIndex];
            let o = n ? "super" : "ball";
            this.obj.material.color = {
                r: s[o][0] / 255,
                g: s[o][1] / 255,
                b: s[o][2] / 255
            };
            this.obj.visible = true
        }
    }
    class ze {
        constructor() {
            this.speed = {
                x: 0,
                y: 0,
                z: 0
            };
            let e = Pe.DROP_SIZE;
            let t = Pe.COLOR_COMBS[Z.colorIndex];
            let n = new THREE.MeshBasicMaterial({
                color: `rgb(${t.ball[0]},${t.ball[1]},${t.ball[2]})`
            });
            var a = new THREE.BoxBufferGeometry(e, e, e);
            this.obj = new THREE.Mesh(a, n);
            this.obj.visible = false;
            this.obj.name = "drop"
        }
        initializeDrop(e, t) {
            this.obj.position.set(e.x, e.y, e.z);
            this.obj.scale.set(1, 1, 1);
            let n = .75 - Math.random() * .5;
            this.speed.x = Math.cos(t) * Pe.DROP_HORIZONTAL_SPEED * n / 60;
            this.speed.z = Math.sin(t) * Pe.DROP_HORIZONTAL_SPEED * n / 60;
            n = 1.25 - Math.random() * .5;
            this.speed.y = Pe.DROP_BOUNCE_SPEED * n / 60;
            this.obj.visible = true
        }
    }
    class $e {
        constructor() {
            this.gameEndStatus = "";
            this.frameCount = 0;
            this.fpsTime = 1e3 / Pe.FPS;
            this.fpsRate = 60 / Pe.FPS;
            this.cameraUpdateFrames = [];
            this.ballLastPosition = null;
            this.superNumber = 0;
            this.isSuperPassed = false;
            this.isBounced = false;
            this.afterimageArray = [];
            this.afterImageLastIndex = 0;
            this.dropArray = [];
            this.splashArray = [];
            this.plateIndex = 0;
            this.plateArray = [];
            this.movingPizzas = []
        }
    }

    function Ze(e) {
        let t = new $e;
        t.cid = e;
        if (!u.platform) {
        	// STATS BAR
            t.stats = new Stats;
            //u.cidE("renderer", e).appendChild(t.stats.dom)
        }
        let n = new we(false);
        t.scene = n.scene;
        t.camera = n.camera;
        t.camera.rotation.x -= Math.PI / 360 * 60;
        t.renderer = n.renderer;
        u.cidE("renderer", e).appendChild(t.renderer.domElement);
        t.light = new THREE.DirectionalLight(16777215);
        t.light.position.set(1, 1, 1);
        t.scene.add(t.light);
        t.light = new THREE.DirectionalLight(16777215);
        t.light.position.set(-1, 1, -1);
        t.scene.add(t.light);
        t.scene.add(new THREE.AmbientLight(1048575, .8));
        let a = Pe.COLOR_COMBS[Z.colorIndex];
        u.cidE("rendererBg", e).style.background = `\nlinear-gradient(\n    rgb(${a.bg[0][0]},${a.bg[0][1]},${a.bg[0][2]}),\n    rgb(${a.bg[1][0]},${a.bg[1][1]},${a.bg[1][2]}),\n    rgb(${a.bg[2][0]},${a.bg[2][1]},${a.bg[2][2]})\n)`;
        t.ball = new je;
        t.scene.add(t.ball.obj);
        for (let e = 0; e < 50; e++) {
            t.afterimageArray[e] = new He;
            t.scene.add(t.afterimageArray[e].obj)
        }
        for (let e = 0; e < 30; e++) {
            t.dropArray[e] = new ze;
            t.scene.add(t.dropArray[e].obj)
        }
        t.plateNumber = Pe.STAGE_PLATE_NUMBER;
        let s = new Ue(t.plateNumber * Pe.PLATE_DISTANCE + Pe.PLATE_INIT_DISTANCE);
        t.scene.add(s.obj);
        t.scene.add(s.bottom);
        for (let e = 0; e < t.plateNumber; e++) {
            let n = [];
            let a = [];
            if (e == 0) n = [0, 1, 2, 3, 4, 11, 12, 13, 14, 15];
            else {
                let t = new Array(Pe.PIZZA_NUMBER);
                let s = Z.stage <= 1 ? [0, 0, 2] : [0, 1, 1];
                l(s, t, "empty");
                let o = Z.stage - 1;
                let d = i(o);
                if (Z.stage == 1 && e < 6) d = [0, 0, 0];
                l(d, t, "lethal");
                [n, a] = r(t)
            }
            t.plateArray.push({
                pizzaIndexArray: n,
                lethalIndexArray: a,
                pizzaArray: o(n, e, ""),
                lethalArray: o(a, e, "lethal")
            })
        }
        t.camera.position.y = Pe.CAMERA_BASE_Y;
        Oe.updateCameraPosition(t);
        return t;

        function o(e, n, a) {
            let s = [];
            let o = null;
            let l = null;
            for (let i = 0; i < e.length; i++) {
                l = e[i];
                if (o === null) {
                    o = e[i]
                }
                if (i == e.length - 1 || l != e[i + 1] - 1) {
                    s.push(new xe(o, l, n, a));
                    t.scene.add(s[s.length - 1].obj);
                    o = null
                }
            }
            return s
        }

        function l(e, t, n) {
            for (let a = 1; a < e.length; a++) {
                while (e[a] > 0) {
                    let s = ~~(Math.random() * Pe.PIZZA_NUMBER);
                    let o = true;
                    for (let e = 0; e < a; e++)
                        if (t[s + e]) o = false;
                    if (o) {
                        for (let e = 0; e < a; e++) t[s + e] = n;
                        e[a] = e[a] - 1
                    }
                }
            }
        }

        function i(e) {
            e = Pe.STAGE_DIFFICULTY_INC * e + 6;
            let t = ~~(e / 10) + 1;
            let n = 1;
            if (Math.random() * 10 > e % 10) t -= 1;
            if (Math.random() < .05) n = 2;
            if (t > 4) t = 4;
            let a = [];
            for (let e = 0; e < t; e++) {
                if (!a[n]) a[n] = 1;
                else a[n] += 1
            }
            return a
        }

        function r(e) {
            let t = [];
            let n = [];
            for (let a = 0; a < e.length; a++) {
                if (e[a] == "empty") {} else if (e[a] == "lethal") n.push(a);
                else t.push(a)
            }
            return [t, n]
        }
    }

    function Ge(e) {
        if (G.rightAmt) {
            e.ball.changeTheta(G.rightAmt * 13);
            G.rightAmt = 0;
            Oe.updateCameraPosition(e)
        }
    }
    let ke = {
        moveWithGravity(e, t, n = 1) {
            if (e.maxYSpeed !== undefined && e.speed.y > e.maxYSpeed) {} else e.speed.y -= Pe.GRAVITY / 60 / 60 * t.fpsRate * n;
            e.obj.position.x += e.speed.x * t.fpsRate;
            e.obj.position.y += e.speed.y * t.fpsRate;
            e.obj.position.z += e.speed.z * t.fpsRate
        }, chekcIsCollided(e, t, n) {
            for (let s = 0; s < e.length; s++) {
                let o = e[s] * Pe.PIZZA_UNIT_THETA;
                let l = (e[s] + 1) * Pe.PIZZA_UNIT_THETA;
                let i = n ? Pe.BALL_THETA_RADIUS * .5 : Pe.BALL_THETA_RADIUS * .9;
                let r = t - i;
                let d = t + i;
                if (a(l, o, d, r)) return true;
                else {
                    if (d > Math.PI * 2) {
                        d -= Math.PI * 2;
                        r -= Math.PI * 2;
                        if (a(l, o, d, r)) return true
                    } else if (r < 0) {
                        d += Math.PI * 2;
                        r += Math.PI * 2;
                        if (a(l, o, d, r)) return true
                    }
                }
            }
            return false;

            function a(e, t, n, a) {
                return !(n >= e && a >= e || n <= t && a <= t)
            }
        }
    };
    class Ve {
        constructor(e) {
            let t = M.splash;
            let n = Pe.COLOR_COMBS[Z.colorIndex];
            let a = new THREE.MeshBasicMaterial({
                color: `rgb(${n.ball[0]},${n.ball[1]},${n.ball[2]})`
            });
            this.obj = new THREE.Mesh(t, a);
            this.obj.position.set(e.x, e.y - Pe.BALL_RADIUS + .05, e.z);
            this.obj.rotation.y = Math.PI * Math.random() * 2;
            let s = Pe.BALL_RADIUS / .2 * .09;
            this.obj.scale.x = s;
            this.obj.scale.z = s;
            this.obj.name = "splash"
        }
    }

    function We(e) {
        if (e.ball.speed.y > Pe.BOUNCE_SPEED) e.ball.speed.y = Pe.BOUNCE_SPEED;
        ke.moveWithGravity(e.ball, e);
        for (let t = 0; t < e.movingPizzas.length; t++) {
            ke.moveWithGravity(e.movingPizzas[t], e)
        }
        Ye(e);
        Ke(e);
        qe(e)
    }

    function Ye(e) {
        let t = -1 * (e.plateIndex * Pe.PLATE_DISTANCE + Pe.PLATE_INIT_DISTANCE);
        let n = t + Pe.BALL_RADIUS * .97;
        if (e.ball.obj.position.y <= n) {
            if (!e.plateArray[e.plateIndex]) {
                a();
                setTimeout(() => {
                    e.gameEndStatus = "win";
                }, 300)
            } else if (e.isSuperPassed) {
                if (!e.isBounced) {
                    e.plateIndex += 1;
                    e.cameraUpdateFrames.push({
                        frames: Pe.CAMERA_UPDATE_FRAMES,
                        speed: -Pe.PLATE_DISTANCE / Pe.CAMERA_UPDATE_FRAMES,
                        targetLeft: -Pe.PLATE_DISTANCE
                    });
                    e.isSuperPassed = false;

                }
            } else if (ke.chekcIsCollided(e.plateArray[e.plateIndex].lethalIndexArray, e.ball.theta, false)) {
                if (e.superNumber >= Pe.SUPER_THRESHOLD) l();
                else if (ke.chekcIsCollided(e.plateArray[e.plateIndex].pizzaIndexArray, e.ball.theta, false) && !ke.chekcIsCollided(e.plateArray[e.plateIndex].lethalIndexArray, e.ball.theta, true)) a();
                else {

                    e.ball.obj.position.y = n - .6 * Pe.BALL_RADIUS;

                    e.ball.obj.scale.y = .4;

                    requestAnimationFrame(() => e.gameEndStatus = "lose");


                }
            } else if (ke.chekcIsCollided(e.plateArray[e.plateIndex].pizzaIndexArray, e.ball.theta, true)) {
                if (e.superNumber >= Pe.SUPER_THRESHOLD) l();
                else a();

            } else if (e.isBounced) s();
            else if (e.ball.obj.position.y < t) o()
        } else if (e.isBounced) s();
        if (e.cameraUpdateFrames.length > 0) {
            for (let t = 0; t < e.cameraUpdateFrames.length; t++) {
                e.cameraUpdateFrames[t].frames -= 1 * e.fpsRate;
                e.camera.position.y += e.cameraUpdateFrames[t].speed * e.fpsRate;
                e.cameraUpdateFrames[t].targetLeft -= e.cameraUpdateFrames[t].speed * e.fpsRate;
                if (e.cameraUpdateFrames[t].frames <= 0) {
                    e.camera.position.y += e.cameraUpdateFrames[t].targetLeft;
                    e.cameraUpdateFrames.shift()
                }
            }
            Oe.updateCameraPosition(e)
        } else {
            e.camera.position.y = -1 * Pe.PLATE_DISTANCE * e.plateIndex + Pe.CAMERA_BASE_Y
        }

        function a() {
            if (!e.isBounced) {
                e.isBounced = true;
                u.playAudio(M.soundsObj.bounce);
                if (e.splashArray.length > 30) Je(e);
                let t = new Ve(new THREE.Vector3(e.ball.obj.position.x, n, e.ball.obj.position.z));
                e.scene.add(t.obj);
                e.splashArray.push(t);
                Xe(e);
                e.superNumber = 0
            }
            let t = n - e.ball.obj.position.y + Pe.GRAVITY / 60 / 60 / Pe.BALL_ELASTICITY;
            let a = t / (Pe.BALL_RADIUS * 2);
            e.ball.obj.scale.y = 1 - a;
            e.ball.obj.position.y += .5 * t;
            e.ball.speed.y += Pe.BALL_ELASTICITY * t * e.fpsRate
        }

        function s() {
            e.isBounced = false;
            if (e.ball.obj.position.y <= n) e.ball.obj.position.y = n;
            e.ball.obj.scale.y = 1;
            e.ball.speed.y = Pe.BOUNCE_SPEED / 60;
            let t = Pe.COLOR_COMBS[Z.colorIndex];
            e.ball.obj.material.color = {
                r: t.ball[0] / 255,
                g: t.ball[1] / 255,
                b: t.ball[2] / 255
            }
        }

        function o() {
            u.playAudio(M.soundsObj.break);
            i();
            requestAnimationFrame(() => requestAnimationFrame(() => Je(e)));
            e.plateIndex += 1;
            e.cameraUpdateFrames.push({
                frames: Pe.CAMERA_UPDATE_FRAMES,
                speed: -Pe.PLATE_DISTANCE / Pe.CAMERA_UPDATE_FRAMES,
                targetLeft: -Pe.PLATE_DISTANCE
            });
            e.superNumber += 1;
            Z.point += e.superNumber;
            r();
            u.cidE("point", e.cid).innerHTML = "" + Z.point;
            let t = Pe.COLOR_COMBS[Z.colorIndex];
            if (e.superNumber >= Pe.SUPER_THRESHOLD) {
                e.ball.obj.material.color = {
                    r: t.super[0] / 255,
                    g: t.super[1] / 255,
                    b: t.super[2] / 255
                }
            }
        }

        function l() {
            u.playAudio(M.soundsObj.break);
            e.isSuperPassed = true;
            e.isBounced = true;
            i(true);
            e.superNumber += 1;
            Z.point += e.superNumber;
            r();
            u.cidE("point", e.cid).innerHTML = "" + Z.point;
            let t = Pe.COLOR_COMBS[Z.colorIndex];
            e.ball.obj.material.color = {
                r: t.ball[0] / 255,
                g: t.ball[1] / 255,
                b: t.ball[2] / 255
            };
            e.ball.speed.y = Pe.BOUNCE_SPEED / 60;
            e.superNumber = 0
        }

        function i(t = false) {
            let n = e.plateArray[e.plateIndex].pizzaArray.concat(e.plateArray[e.plateIndex].lethalArray);
            let a = n.length;
            let s = Pe.COLOR_COMBS[Z.colorIndex];
            if (t) {
                o();
                setTimeout(o(), 100)
            }
            e.movingPizzas = e.movingPizzas.concat(n);
            setTimeout(() => {
                for (let t = 0; t < a; t++) {
                    e.scene.remove(e.movingPizzas[t].obj)
                }
                e.movingPizzas.splice(0, a)
            }, 5e3);

            function o() {
                for (let e = 0; e < n.length; e++) {
                    n[e].obj.material.color = {
                        r: s.super[0] / 255,
                        g: s.super[1] / 255,
                        b: s.super[2] / 255
                    }
                }
            }
        }

        function r() {
            if (e.superNumber > 0) {
                let t = `<div class="pointAlert">+ ${e.superNumber}</div>`;
                let n = u.convertTemplateToElement(t, u.cidE("pointAlertBox", e.cid));
                requestAnimationFrame(() => {
                    n.classList.add("pointAnimate")
                })
            }
        }
    }

    function Ke(e) {
        if (e.ballLastPosition !== null && e.ball.obj.position.y - e.ballLastPosition.y != 0) {
            let n = 3;
            let a = {
                x: (e.ball.obj.position.x - e.ballLastPosition.x) / n,
                y: (e.ball.obj.position.y - e.ballLastPosition.y) / n,
                z: (e.ball.obj.position.z - e.ballLastPosition.z) / n
            };
            for (let e = 0; e < n; e++) {
                t(e + 1)
            }
            for (let t = 0; t < e.afterimageArray.length; t++) {
                e.afterimageArray[t].obj.scale.x -= Pe.AFTERIMAGE_DECAY * e.fpsRate;
                e.afterimageArray[t].obj.scale.z -= Pe.AFTERIMAGE_DECAY * e.fpsRate;
                if (e.afterimageArray[t].obj.scale.x < .03) {
                    e.afterimageArray[t].obj.visible = false
                }
            }

            function t(t) {
                let n = {
                    x: e.ball.obj.position.x - a.x * t,
                    y: e.ball.obj.position.y - a.y * t,
                    z: e.ball.obj.position.z - a.z * t
                };
                e.afterImageLastIndex += 1;
                if (e.afterImageLastIndex >= e.afterimageArray.length) e.afterImageLastIndex = 0;
                e.afterimageArray[e.afterImageLastIndex].setPositionHeight(n, a.y, e.superNumber >= 3)
            }
        }
        e.ballLastPosition = {
            x: e.ball.obj.position.x,
            y: e.ball.obj.position.y,
            z: e.ball.obj.position.z
        }
    }

    function Xe(e) {
        let t = 0;
        let n = 0;
        while (t < Math.PI * 2) {
            e.dropArray[n].initializeDrop(e.ball.obj.position, t);
            t += .1 * Math.PI * (1.25 - Math.random() * .5);
            n++
        }
    }

    function qe(e) {
        let t = .01;
        if (e.dropArray[0] && e.dropArray[0].obj.scale.x < .5) {
            for (let t = 0; t < e.dropArray.length; t++) {
                e.dropArray[t].obj.visible = false
            }
        }
        for (let n = 0; n < e.dropArray.length; n++) {
            e.dropArray[n].obj.scale.x -= t * e.fpsRate;
            e.dropArray[n].obj.scale.y -= t * e.fpsRate;
            e.dropArray[n].obj.scale.z -= t * e.fpsRate;
            ke.moveWithGravity(e.dropArray[n], e, .5)
        }
    }

    function Je(e) {
        for (let t = 0; t < e.splashArray.length; t++) {
            e.scene.remove(e.splashArray[t].obj)
        }
        e.splashArray = []
    }

    function Qe(e) {
        if (e.gameEndStatus == "win") {
            Z.stage += 1;
            Z.preventAdsTimes += 1;
            u.navigateToComponent(ot)
        } else if (e.gameEndStatus == "lose") {
            console.warn('show ads');
            try{
                fillAdbirdAd();
            }
            catch(err){}
            if (v.bestPoint < Z.point) {
                v.bestPoint = Z.point;
                _.setData()
            }
            u.cidE("gameEnd", e.cid).classList.remove("hidden");
            u.cidE("level", e.cid).classList.add("levelEnd");
            u.cidE("best", e.cid).innerHTML = "" + v.bestPoint
        }
        Z.pauseObj.isPauseAllowed = false
    }
    let et, tt, nt = Date.now();

    function at(e) {
        e.renderer.render(e.scene, e.camera);
        Z.isLooping = true;
        requestAnimationFrame(() => {
            Oe.checkFps(e);
            t()
        });

        function t() {
            if (!u.platform) e.stats.update();
            et = Date.now();
            tt = et - nt;
            let n = tt > e.fpsTime;
            e.frameCount += 1;
            if (n) {
                nt = et - tt % e.fpsTime;
                Ge(e);
                We(e)
            }
            if (!e.gameEndStatus) {
                if (n) e.renderer.render(e.scene, e.camera);
                requestAnimationFrame(() => {
                    if (!Z.pauseObj.isPaused) t();
                    else Z.pauseObj.pausePromise.then(t)
                })
            } else {
                requestAnimationFrame(() => {
                    e.renderer.render(e.scene, e.camera);
                    requestAnimationFrame(() => {
                        e.renderer.render(e.scene, e.camera)
                    })
                });
                Z.isLooping = false;
                Qe(e)
            }
        }
    }

    function st(e) {
        G.initializeVariables();
        setTimeout(() => {
            if (!G.isSubscribed) G.subscribeToGameControl()
        }, 500);
        Z.pauseObj.isPauseAllowed = true;
        let t = Ze(e);
        at(t)
    }
    class ot extends u.Component {
        constructor(e) {
            let t = u.ncid;
            super({
                template: `\n<div class="rendererBg" id="${u.nid("rendererBg")}"></div>\n<div class="renderer" id="${u.nid("renderer")}"></div>\n<div class="panel" id="${u.nid("panel")}"></div>\n<div class=gameInfo>\n    <div class="level" id="${u.nid("level")}">Level ${Z.stage}</div>\n    <div class="point" id="${u.nid("point")}">${Z.point}</div>\n</div>\n<div class="gameEnd hidden" id="${u.nid("gameEnd")}">\n    <div class="modalBg"></div>\n    <div class="best">Best: <span id="${u.nid("best")}"></span></div>\n    <div class="continue">\n        <div class="continueText">GAME OVER</div>\n        <div class="button" id="${u.nid("watch")}"></div>\n        <div class="button" id="${u.nid("invite")}"></div>\n    </div>\n    <div class="restart" id="${u.nid("restart")}"> &nbsp; Tap to Restart &nbsp; \n        <div class="cross">X</div>\n    </div>\n</div>\n<div id="${u.nid("pointAlertBox")}"></div>`,
                cssClassNamespace: "GamePlayComponent",
                registerElements: () => {
                    u.cidE("watch").addEventListener("click", () => {

                    });
                     u.cidE("invite").addEventListener("click", () => {

                    });
                    u.cidE("restart").addEventListener("click", () => {
                        Z.stage = 1;
                        Z.point = 0;
                        u.navigateToComponent(ot)
                    });
                },
                parentElement: e

            });
            this.cid = t;
            try {
                if (!u.platform) st(t);
                else if (u.platform == "FB") {
                   
                }
            } catch (e) {
                w.alert(e)
            }

            function n() {
                m.startInvitation(v.invitationArray, 1).then(e => {
                    Z.preventAdsTimes += 1;
                    
                    u.navigateToComponent(ot)
                }, e => {
                    console.log(e);
                    if (e == "TOO_CLOSE") {
                        let e = "You have just invited this friend. Please invite another friend.";
                        w.alert(e).then(() => {
                            n()
                        })
                    } else if (e == "USER_INPUT") {} else {
                        w.alert("Invitation fails. Please try again later.")
                    }
                })
            }
        }
    }
    class lt extends u.Component {
        constructor(e) {
            super({
                template: `\n<div class="background"><img class="backgroundImage"></div>`,
                cssClassNamespace: "GameLoadComponent",
                registerElements: () => {},
                parentElement: e
            });
            if (!u.platform) w.loader(true);
            let t = _.initializeData(w.alert);
            let n = ["asset/lib/controls/OrbitControls.js"];
            if (!u.platform) n.push("asset/lib/libs/stats.min.js");
            let a = u.platform ? "three.min.js" : "three.js";
            let s = u.loadLibraries(["asset/lib/" + a]).then(() => {
                u.progressLoader(50, 60);
                return u.loadLibraries(n)
            });
            Promise.all([t, s]).then(i);
            let o = [];
            let l = [];

            function i() {
                u.progressLoader(60, 99);
                let e = [M.loadSounds(), M.loadGameResources()];
                if (u.platform == "FB") e.push(m.loadInvitationImage("asset/invitation.jpg"));
                Promise.all(e).then(() => {
                    r()
                });
                M.loadMainBgm().then(() => {
                    M.loadMusics()
                });
                u.loadImages(o).then(() => u.loadImages(l));
                M.loadGameResources()
            }

            function r() {
                if (!u.platform) w.loader(false);
                if (u.platform == "FB") {
                  
                } else {
                    v.lastLoginDate = (new Date).toISOString();
                    u.navigateToComponent(ot)
                }
            }
        }
    }
    u.componentRegistry = u.componentRegistry.concat([{
        component: lt,
        selector: null,
        cssFileNameNoExt: "game-load.component"
    }, {
        component: ot,
        selector: null,
        cssFileNameNoExt: "game-play.component"
    }]);
    class it extends u.Module {
        constructor() {
            super({
                cssClassNamespace: "GameModule"
            });
            u.onModuleDestroy = (() => {
                M.clearResources()
            });
            u.navigateToComponent(lt)
        }
    }
    u.moduleRegistry = [{
        module: it,
        cssFileNameNoExt: "game.module"
    }];
    u.initializeXHFW();
    setTimeout(() => {
        u.navigateToModule(it)
    }, 50)
})();